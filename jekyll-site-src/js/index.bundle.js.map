{"version":3,"sources":["webpack:///index.bundle.js","webpack:///webpack/bootstrap 5705db8b6fef46e06a8d","webpack:///./jekyll-site-src/_js_src/mdc-code-render.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","renderSimpleCodeRenderer","source","lineno","shellFilter","lines","cm","display","wrapper","querySelectorAll","length","line","querySelector","innerText","indexOf","childrenOfLine","childNodes","j","classList","contains","span","document","createElement","add","innerHTML","nodeValue","replaceChild","renderLineHighlight","highlight","parentNode","dataset","split","trim","rangeRegexp","found","match","start","parseInt","end","getDoc","addLineClass","highlightline","kramdownLang","_defaultLang","replace","language","kramdownToCodeMirrorMap","mode","CodeMirror","elt","lineNumbers","readOnly","renderComplexCodeRenderer","renderer","id","MaterialRadioButton","groupname","label","radioLabel","getElementById","cloneNode","setAttribute","radioInput","addEventListener","e","lang","this","selectedLanguage","set","evt","createEvent","initEvent","dispatchEvent","_complexRendererAllowedLang","window","sessionStorage","setItem","_value","getItem","sources","availableLanguage","removeChild","push","maxHeight","radioForm","cmMap","radioName","simpleRender","radioEl","clientHeight","getScrollInfo","appendChild","insertBefore","firstChild","targetLanguage","checked","remove","style","height","offsetHeight","objc","swift","bash","shell","ruby","text","complexrenders","simplerenders","console","log","constructor","type","location","hash","href","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__mdc_code_render__"],"mappings":"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","file":"index.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n * @fileoverview\n * Material code renderer provides a wrapper around CodeMirror and renders code\n * snippets into material design styling. This module is imported for\n * side-effects only.\n */\n\n// A Boolean value to control line numbers generation. Device width smaller\n// than 600px will be considered as mobile device.\n// var _mobileSized = false;\n// Default language setting when no value is provided by kramdown.\nvar _defaultLang = 'objc';\n// A Map between kramdown language name and codeMirror name.\nvar kramdownToCodeMirrorMap = {\n  objc: {\n    language: 'Objective-C',\n    mode: 'text/x-objectivec'\n  },\n  swift: {\n    language: 'Swift',\n    mode: 'text/x-swift'\n  },\n  bash: {\n    language: 'Shell',\n    mode: 'text/x-sh'\n  },\n  shell: {\n    language: 'Shell',\n    mode: 'text/x-sh'\n  },\n  ruby: {\n    language: 'Ruby',\n    mode: 'text/x-ruby'\n  },\n  text: {\n    language: 'Text',\n    mode: 'text/plain'\n  }\n};\n\n/**\n * Generate single code mirror obj from source\n * @param {!Element} source An DOM element that contains the code snippet.\n * @param {boolean | false} lineno An boolean value for line number.\n * @return {Object} An Object of codeMirror bject and language.\n */\nfunction renderSimpleCodeRenderer(source, lineno) {\n  function shellFilter() {\n    var lines = cm.display.wrapper.querySelectorAll('.CodeMirror-line>span');\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      if (line.querySelector('.cm-def') && line.innerText.indexOf('$') !== -1) {\n        var childrenOfLine = line.childNodes;\n        for (var j = 0; j < childrenOfLine.length; j++) {\n          if (childrenOfLine[j].classList && childrenOfLine[j].classList.contains('cm-def') !== -1) {\n            break;\n          }\n          var span = document.createElement('span');\n          span.classList.add('cm-userpath');\n          span.innerHTML = childrenOfLine[j].nodeValue;\n          line.replaceChild(span, line.childNodes[j]);\n        }\n      }\n    }\n  }\n  function renderLineHighlight() {\n    var highlight = source.parentNode.dataset.highlight.split(',');\n    for (var i = 0; i < highlight.length; i++) {\n      highlight[i] = highlight[i].trim();\n      var rangeRegexp = /(\\d)-(\\d)/;\n      var found = highlight[i].match(rangeRegexp);\n      if (found !== null) {\n        var start = parseInt(found[1]) - 1;\n        var end = parseInt(found[2]);\n        for (var j = start; j < end; j++) {\n          cm.getDoc().addLineClass(j, 'wrap', 'hll');\n        }\n      } else {\n        var highlightline = parseInt(highlight[i]) - 1;\n        cm.getDoc().addLineClass(highlightline, 'wrap', 'hll');\n      }\n    }\n  }\n  var kramdownLang = source.classList.length == 0 ? _defaultLang : source.classList[0].replace('language-', '');\n  var language = kramdownToCodeMirrorMap[kramdownLang].language;\n  var mode = kramdownToCodeMirrorMap[kramdownLang].mode;\n  var cm = CodeMirror(function (elt) {\n    source.parentNode.parentNode.replaceChild(elt, source.parentNode);\n  }, {\n    value: source.innerText.trim(),\n    mode: mode,\n    lineNumbers: lineno || false,\n    readOnly: 'true'\n  });\n\n  // If the language is Shell, this piece of logic process user path properly\n  if (language === 'Shell') {\n    shellFilter();\n  }\n  // If line highlight is specified, add line highlight class to those lines\n  if (source.parentNode.dataset.highlight) {\n    renderLineHighlight();\n  }\n  return {\n    language: language,\n    cm: cm\n  };\n}\n\n/**\n * Generate multiple code mirror objects and form the material code renderer.\n * @param {Element} renderer An DOM element that wraps multiple code snippets.\n * @param {string} id An string to identify the renderer.\n * @return {Object} An Object of codeMirror bject and language.\n */\nfunction renderComplexCodeRenderer(renderer, id) {\n  // Allowed Language for complex material code render.\n  var _complexRendererAllowedLang = ['Objective-C', 'Swift'];\n  // A Utility class to set/get page selected language.\n  var selectedLanguage = {\n    set: function set(value) {\n      value = _complexRendererAllowedLang.indexOf(value) !== -1 ? value : _complexRendererAllowedLang[0];\n      if (typeof window.sessionStorage !== 'undefined') {\n        window.sessionStorage.setItem('selectedLanguage', value);\n      } else {\n        selectedLanguage._value = value;\n      }\n    },\n    get: function get() {\n      var value;\n      if (typeof window.sessionStorage !== 'undefined') {\n        value = window.sessionStorage.getItem('selectedLanguage');\n      } else {\n        value = selectedLanguage._value;\n      }\n      return value || _complexRendererAllowedLang[0];\n    }\n  };\n  /**\n   * Generate Single radio button element from frontend template\n   * @param {string} groupname An string to identify the group of radio button\n   * belongs to.\n   * @param {string} label The displayed name of the radio button.\n   * @return {Element} An unattached DOM Node for a radio button.\n   */\n  function MaterialRadioButton(groupname, label) {\n    var radioLabel = document.getElementById('tmpl-radio-button').cloneNode(true);\n    radioLabel.setAttribute('id', '');\n    var radioInput = radioLabel.querySelector('.radio-input');\n    radioInput.setAttribute('name', groupname);\n    radioInput.setAttribute('value', label);\n    var languageSpan = radioLabel.querySelector('.language-name');\n    languageSpan.innerText = label;\n\n    radioLabel.addEventListener('click', function (e) {\n      var lang = this.querySelector('.radio-input').value;\n      if (selectedLanguage.get() == lang) {\n        return false;\n      }\n      selectedLanguage.set(this.querySelector('.radio-input').value);\n      var evt = document.createEvent('HTMLEvents');\n      evt.initEvent('selectLangChange', false, true);\n      document.dispatchEvent(evt);\n    });\n    return radioLabel;\n  }\n\n  var sources = renderer.querySelectorAll('pre code');\n  var availableLanguage = [];\n  // Before generate:\n  // 1. Take care of invalid code snippet case.\n  for (var i = 0; sources && i < sources.length; i++) {\n    var source = sources[i];\n    var kramdownLang = source.classList.length == 0 ? '' : source.classList[0].replace('language-', '');\n    var language = kramdownToCodeMirrorMap[kramdownLang].language;\n    if (_complexRendererAllowedLang.indexOf[language] === -1) {\n      source.parentNode.removeChild(source);\n    } else {\n      availableLanguage.push(language);\n    }\n  }\n  // 2. Take care of non code snippet case after invalid snippets are deleted.\n  if (!sources || sources.length === 0) {\n    renderer.parentNode.removeChild(renderer);\n    return;\n  }\n  // Generate Complex Code Renderer:\n  // 1. Variables set up\n  var maxHeight = 0;\n  var radioForm = document.createElement('form');\n  radioForm.classList.add('language');\n  var cmMap = {};\n  var radioName = 'MaterialCodeRenderer' + id;\n  // var useLineNumbers = !_mobileSized;\n  // if (useLineNumbers) {\n  //   renderer.classList.add('line-numbers');\n  // }\n  // 2. Convert code snippet to code mirror\n  for (var i = 0; i < sources.length; i++) {\n    var source = sources[i];\n    // deactivate lineno for all code renderers.\n    var simpleRender = renderSimpleCodeRenderer(source, false);\n    var radioEl = new MaterialRadioButton(radioName, simpleRender.language);\n    var clientHeight = simpleRender.cm.getScrollInfo().clientHeight;\n    maxHeight = maxHeight < clientHeight ? clientHeight : maxHeight;\n    radioForm.appendChild(radioEl);\n    cmMap[simpleRender.language] = simpleRender.cm;\n  }\n  // 3. Add radioForm into DOM\n  renderer.insertBefore(radioForm, renderer.firstChild);\n  // 4. Listen to selectLangChange event and change code snippet in display.\n  radioForm.addEventListener('selectLangChange', function () {\n    var targetLanguage = selectedLanguage.get();\n    targetLanguage = availableLanguage.indexOf(targetLanguage) == -1 ? availableLanguage[0] : targetLanguage;\n    radioForm.querySelector('.radio-input[value=\"' + targetLanguage + '\"]').checked = true;\n    renderer.querySelector('.CodeMirror.active').classList.remove('active');\n    cmMap[targetLanguage].display.wrapper.classList.add('active');\n    return false;\n  });\n  // 5. Set the code renderer container height to the highest code mirror.\n  renderer.style.height = maxHeight + radioForm.offsetHeight + 'px';\n\n  // After Generation:\n  // Initialize with targetLanguage\n  var targetLanguage = selectedLanguage.get();\n  targetLanguage = availableLanguage.indexOf(targetLanguage) == -1 ? availableLanguage[0] : targetLanguage;\n  radioForm.querySelector('.radio-input[value=\"' + targetLanguage + '\"]').checked = true;\n  cmMap[targetLanguage].display.wrapper.classList.add('active');\n}\n\nwindow.addEventListener('load', function () {\n  // if (document.body.clientWidth < 600) {\n  //   _mobileSized = true;\n  // }\n  // First: renders material code wrapper\n  var complexrenders = document.querySelectorAll('.material-code-render');\n  for (var i = 0; i < complexrenders.length; i++) {\n    // RendererIndex assigns a unique id to each code renderer. The id will\n    // be used by radioForm for each code renderer to form radio button group.\n    renderComplexCodeRenderer(complexrenders[i], i);\n  }\n  // Second: renders all other code snippet\n  var simplerenders = document.querySelectorAll('pre code');\n  for (var j = 0; j < simplerenders.length; j++) {\n    renderSimpleCodeRenderer(simplerenders[j]);\n  }\n  // Listen to selectLangChange event at document level and forward that event\n  // to exsiting material code renders\n  document.addEventListener('selectLangChange', function (e) {\n    console.log('value changes');\n    for (var i = 0; i < complexrenders.length; i++) {\n      var evt = new e.constructor(e.type, e);\n      complexrenders[i].querySelector('.language').dispatchEvent(evt);\n    }\n  });\n  // scroll to targeted anchor after code renderer completes.\n  if (window.location.hash) {\n    window.location.href = window.location.hash;\n  }\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mdc_code_render__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mdc_code_render___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__mdc_code_render__);\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5705db8b6fef46e06a8d","/**\n * @fileoverview\n * Material code renderer provides a wrapper around CodeMirror and renders code\n * snippets into material design styling. This module is imported for\n * side-effects only.\n */\n\n\n// A Boolean value to control line numbers generation. Device width smaller\n// than 600px will be considered as mobile device.\n// var _mobileSized = false;\n// Default language setting when no value is provided by kramdown.\nvar _defaultLang = 'objc';\n// A Map between kramdown language name and codeMirror name.\nvar kramdownToCodeMirrorMap = {\n  objc: {\n    language: 'Objective-C',\n    mode: 'text/x-objectivec'\n  },\n  swift: {\n    language: 'Swift',\n    mode: 'text/x-swift'\n  },\n  bash: {\n    language: 'Shell',\n    mode: 'text/x-sh'\n  },\n  shell: {\n    language: 'Shell',\n    mode: 'text/x-sh'\n  },\n  ruby: {\n    language: 'Ruby',\n    mode: 'text/x-ruby'\n  },\n  text: {\n    language: 'Text',\n    mode: 'text/plain'\n  }\n};\n\n/**\n * Generate single code mirror obj from source\n * @param {!Element} source An DOM element that contains the code snippet.\n * @param {boolean | false} lineno An boolean value for line number.\n * @return {Object} An Object of codeMirror bject and language.\n */\nfunction renderSimpleCodeRenderer(source, lineno) {\n  function shellFilter() {\n    var lines = cm.display.wrapper.querySelectorAll('.CodeMirror-line>span');\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      if (line.querySelector('.cm-def') &&\n        line.innerText.indexOf('$') !== -1) {\n          var childrenOfLine = line.childNodes;\n          for (var j = 0; j < childrenOfLine.length; j++) {\n            if (childrenOfLine[j].classList &&\n               childrenOfLine[j].classList.contains('cm-def') !== -1) {\n              break;\n            }\n            var span = document.createElement('span');\n            span.classList.add('cm-userpath');\n            span.innerHTML = childrenOfLine[j].nodeValue;\n            line.replaceChild(span, line.childNodes[j]);\n          }\n      }\n    }\n  }\n  function renderLineHighlight() {\n    var highlight = source.parentNode.dataset.highlight.split(',');\n    for (var i = 0; i < highlight.length; i++) {\n      highlight[i] = highlight[i].trim();\n      var rangeRegexp = /(\\d)-(\\d)/;\n      var found = highlight[i].match(rangeRegexp);\n      if (found !== null) {\n        var start = parseInt(found[1]) - 1;\n        var end = parseInt(found[2])\n        for (var j = start; j < end; j++) {\n          cm.getDoc().addLineClass(j, 'wrap', 'hll');\n        }\n      }\n      else {\n        var highlightline = parseInt(highlight[i]) - 1;\n        cm.getDoc().addLineClass(highlightline, 'wrap', 'hll');\n      }\n    }\n  }\n  var kramdownLang = source.classList.length == 0 ?\n      _defaultLang : source.classList[0].replace('language-', '');\n  var language = kramdownToCodeMirrorMap[kramdownLang].language;\n  var mode = kramdownToCodeMirrorMap[kramdownLang].mode;\n  var cm = CodeMirror(function(elt) {\n    source.parentNode.parentNode.replaceChild(elt, source.parentNode);\n  }, {\n    value: source.innerText.trim(),\n    mode: mode,\n    lineNumbers: lineno || false,\n    readOnly: 'true'\n  });\n\n  // If the language is Shell, this piece of logic process user path properly\n  if (language === 'Shell') {\n    shellFilter();\n  }\n  // If line highlight is specified, add line highlight class to those lines\n  if (source.parentNode.dataset.highlight) {\n    renderLineHighlight();\n  }\n  return {\n    language: language,\n    cm: cm\n  };\n}\n\n\n/**\n * Generate multiple code mirror objects and form the material code renderer.\n * @param {Element} renderer An DOM element that wraps multiple code snippets.\n * @param {string} id An string to identify the renderer.\n * @return {Object} An Object of codeMirror bject and language.\n */\nfunction renderComplexCodeRenderer(renderer, id) {\n  // Allowed Language for complex material code render.\n  var _complexRendererAllowedLang = ['Objective-C', 'Swift'];\n  // A Utility class to set/get page selected language.\n  var selectedLanguage = {\n    set: function(value) {\n      value = _complexRendererAllowedLang.indexOf(value) !== -1 ?\n              value : _complexRendererAllowedLang[0];\n      if (typeof(window.sessionStorage) !== 'undefined') {\n        window.sessionStorage.setItem('selectedLanguage', value);\n      }\n      else {\n        selectedLanguage._value = value;\n      }\n    },\n    get: function() {\n      var value;\n      if (typeof(window.sessionStorage) !== 'undefined') {\n        value = window.sessionStorage.getItem('selectedLanguage');\n      }\n      else {\n        value = selectedLanguage._value;\n      }\n      return value || _complexRendererAllowedLang[0];\n    }\n  };\n  /**\n   * Generate Single radio button element from frontend template\n   * @param {string} groupname An string to identify the group of radio button\n   * belongs to.\n   * @param {string} label The displayed name of the radio button.\n   * @return {Element} An unattached DOM Node for a radio button.\n   */\n  function MaterialRadioButton(groupname, label) {\n    var radioLabel = document.getElementById('tmpl-radio-button')\n                    .cloneNode(true);\n    radioLabel.setAttribute('id', '');\n    var radioInput = radioLabel.querySelector('.radio-input');\n    radioInput.setAttribute('name', groupname);\n    radioInput.setAttribute('value', label);\n    var languageSpan = radioLabel.querySelector('.language-name');\n    languageSpan.innerText = label;\n\n    radioLabel.addEventListener('click', function(e) {\n      var lang = this.querySelector('.radio-input').value;\n      if (selectedLanguage.get() == lang) {\n        return false;\n      }\n      selectedLanguage.set(this.querySelector('.radio-input').value);\n      var evt = document.createEvent('HTMLEvents');\n      evt.initEvent('selectLangChange', false, true);\n      document.dispatchEvent(evt);\n    });\n    return radioLabel;\n  }\n\n  var sources = renderer.querySelectorAll('pre code');\n  var availableLanguage = [];\n  // Before generate:\n  // 1. Take care of invalid code snippet case.\n  for (var i = 0; sources && i < sources.length; i++) {\n    var source = sources[i];\n    var kramdownLang = source.classList.length == 0 ? '' :\n      source.classList[0].replace('language-', '');\n    var language = kramdownToCodeMirrorMap[kramdownLang].language;\n    if (_complexRendererAllowedLang.indexOf[language] === -1) {\n      source.parentNode.removeChild(source);\n    }\n    else {\n      availableLanguage.push(language);\n    }\n  }\n  // 2. Take care of non code snippet case after invalid snippets are deleted.\n  if (!sources || sources.length === 0) {\n    renderer.parentNode.removeChild(renderer);\n    return;\n  }\n  // Generate Complex Code Renderer:\n  // 1. Variables set up\n  var maxHeight = 0;\n  var radioForm = document.createElement('form');\n  radioForm.classList.add('language');\n  var cmMap = {};\n  var radioName = 'MaterialCodeRenderer' + id;\n  // var useLineNumbers = !_mobileSized;\n  // if (useLineNumbers) {\n  //   renderer.classList.add('line-numbers');\n  // }\n  // 2. Convert code snippet to code mirror\n  for (var i = 0; i < sources.length; i++) {\n    var source = sources[i];\n    // deactivate lineno for all code renderers.\n    var simpleRender = renderSimpleCodeRenderer(source, false);\n    var radioEl = new MaterialRadioButton(radioName, simpleRender.language);\n    var clientHeight = simpleRender.cm.getScrollInfo().clientHeight;\n    maxHeight = maxHeight < clientHeight ? clientHeight : maxHeight;\n    radioForm.appendChild(radioEl);\n    cmMap[simpleRender.language] = simpleRender.cm;\n  }\n  // 3. Add radioForm into DOM\n  renderer.insertBefore(radioForm, renderer.firstChild);\n  // 4. Listen to selectLangChange event and change code snippet in display.\n  radioForm.addEventListener('selectLangChange', function() {\n    var targetLanguage = selectedLanguage.get();\n    targetLanguage = availableLanguage.indexOf(targetLanguage) == -1 ?\n                     availableLanguage[0] : targetLanguage;\n    radioForm.querySelector('.radio-input[value=\"' +\n                            targetLanguage + '\"]').checked = true;\n    renderer.querySelector('.CodeMirror.active').classList.remove('active');\n    cmMap[targetLanguage].display.wrapper.classList.add('active');\n    return false;\n  });\n  // 5. Set the code renderer container height to the highest code mirror.\n  renderer.style.height = maxHeight + radioForm.offsetHeight + 'px';\n\n  // After Generation:\n  // Initialize with targetLanguage\n  var targetLanguage = selectedLanguage.get();\n  targetLanguage = availableLanguage.indexOf(targetLanguage) == -1 ?\n                   availableLanguage[0] : targetLanguage;\n  radioForm.querySelector('.radio-input[value=\"' +\n                           targetLanguage + '\"]').checked = true;\n  cmMap[targetLanguage].display.wrapper.classList.add('active');\n}\n\n\nwindow.addEventListener('load', function() {\n  // if (document.body.clientWidth < 600) {\n  //   _mobileSized = true;\n  // }\n  // First: renders material code wrapper\n  var complexrenders = document.querySelectorAll('.material-code-render');\n  for (var i = 0; i < complexrenders.length; i++) {\n    // RendererIndex assigns a unique id to each code renderer. The id will\n    // be used by radioForm for each code renderer to form radio button group.\n    renderComplexCodeRenderer(complexrenders[i], i);\n  }\n  // Second: renders all other code snippet\n  var simplerenders = document.querySelectorAll('pre code');\n  for (var j = 0; j < simplerenders.length; j++) {\n    renderSimpleCodeRenderer(simplerenders[j]);\n  }\n  // Listen to selectLangChange event at document level and forward that event\n  // to exsiting material code renders\n  document.addEventListener('selectLangChange', function(e) {\n    console.log('value changes');\n    for (var i = 0; i < complexrenders.length; i++) {\n      var evt = new e.constructor(e.type, e);\n      complexrenders[i].querySelector('.language').dispatchEvent(evt);\n    }\n  });\n  // scroll to targeted anchor after code renderer completes.\n  if(window.location.hash) {\n    window.location.href = window.location.hash;\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./jekyll-site-src/_js_src/mdc-code-render.js"],"sourceRoot":""}