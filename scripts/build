#!/usr/bin/env node

const assert = require('assert');
const chalk = require('chalk');
const fs = require('fs-extra');
const path = require('path');
const reporter = require('./lib/reporter');
const webpack = require('webpack');
const { BuildDir } = require('./lib/conf');
const { JekyllFile } = require('./lib/file');
const { execSync } = require('child_process');
const { sync: globSync } = require('glob');


// Validate input
const args = process.argv.slice(2);
if (args.length == 0) {
  console.error('Missing path to components repo.\n' +
                'Usage: script/build path/to/mdc/repo');
  process.exit(1);
}

const basePath = args[0];
const basePathStat = fs.lstatSync(basePath);
if (!basePathStat.isDirectory()) {
  console.error('Path argument must point to a directory.\n' +
                'Usage: script/build path/to/mdc/repo');
  process.exit(1);
}

// Ensure that the working directory is the project root
const projectRootPath = path.join(__dirname, '..');
process.chdir(projectRootPath);

// Check prerequisites
reporter.step('Checking dependencies...', () => {
  for (let pkgManager of ['bundle', 'yarn']) {
    try {
      execSync(`${pkgManager} check`);
    } catch(e) {
      console.error(`Dependencies not met. Please run ${pkgManager} install.`);
      process.exit(1);
    }
  }
});

reporter.step('Cleaning...', () => {
  try {
    assert(process.cwd() == projectRootPath);
    fs.removeSync(BuildDir.STAGE);
    fs.removeSync(BuildDir.DIST);
  } catch(e) {
    console.error(chalk.red('Something went wrong'));
    console.error(e);
    process.exit(1);
  }
});

fs.copySync(BuildDir.JEKYLL, BuildDir.STAGE);

const jekyllMarkdownFiles =
    reporter.step('Finding Jekyll markdown...', () => {
      const markdownFiles = globSync(path.join(basePath, '**/*.md'))
          .map((filePath) => JekyllFile.readFromPath(filePath, basePath))
      return markdownFiles.filter((file) => file.isValidJekyll);
    });

reporter.step('Liquifying...', () => {
  jekyllMarkdownFiles.forEach((file) => file.uncommentHiddenCode());
});

reporter.step('Creating indexes...', () => {
  jekyllMarkdownFiles.forEach((file) => {
    if (file.shouldBecomeIndex) {
      file.basename = 'index.md';
    }
  });
});

reporter.step('Copying files...', () => {
  jekyllMarkdownFiles.forEach((file) => {
    file.path = path.resolve(BuildDir.STAGE, file.relative);
    file.basedir = BuildDir.STAGE;
    file.write();
  });

  globSync(path.join(basePath, '**/docs/'))
      .forEach((docsDirPath) => {
        const relativePath = path.relative(basePath, docsDirPath);
        const newPath = path.resolve(BuildDir.STAGE, relativePath);
        fs.ensureDirSync(newPath);
        fs.copySync(docsDirPath, newPath);
      });
});

reporter.step('Building assets...', () => {
  // TODO(shyndman): Periodically check if we can uncomment this. There's some
  // noisy deprecation deep in Webpack.
  process.noDeprecation = true;
  webpack(require('../webpack.config'), (err, stats) => {
    reporter.webpackStats(stats);

    if (err) {
      reporter.fatal(err);
      process.exit(1);
    } else if (stats.hasErrors()) {
      process.exit(1);
    }

    finishBuild();
  });
}, { noCheck: true });

function finishBuild() {
  reporter.step('Building Jekyll site...', () => {
    const jekyllEnv = Object.assign({}, process.env, {
      BUNDLE_GEMFILE: path.join(projectRootPath, 'GEMFILE'),
    });
    execSync(`bundle exec jekyll build \
        --source ${BuildDir.STAGE} \
        --destination ${BuildDir.DIST} \
        --config ${path.join(BuildDir.STAGE, '_config.yml')}`,
      {
        env: jekyllEnv,
        stdio: 'inherit',
      });
  }, { noCheck: true });

  reporter.complete();
}
