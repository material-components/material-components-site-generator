#!/usr/bin/env node

// First things first, let's check dependencies
require('./lib/check-deps');

const assert = require('assert');
const fs = require('fs-extra');
const path = require('path');
const reporter = require('./lib/reporter');
const webpack = require('webpack');
const { ASSET_EXTENSIONS, JEKYLL_CONFIG_PATH, BuildDir } = require('./lib/project-paths');
const { JekyllConfiguration } = require('./lib/jekyll-config');
const { PlatformSite } = require('./lib/platform-site');
const { addWatchToWebpackConfig, setupFileWatches } = require('./lib/watch');
const { execSync } = require('child_process');
const { initCli } = require('./lib/cli');
const { processJekyllFile, processDocsDirectory } = require('./lib/processors');


// Parses and validates command line arguments.
const cli = initCli();
const platformSites = cli.input.map((repoPath) => new PlatformSite(repoPath));

// Ensure that the working directory is the project root
const projectRootPath = path.join(__dirname, '..');
process.chdir(projectRootPath);

reporter.step('Cleaning', () => {
  try {
    assert(process.cwd() == projectRootPath);
    fs.removeSync(BuildDir.STAGE);
    fs.removeSync(BuildDir.DIST);
  } catch(e) {
    console.error(e);
    process.exit(1);
  }
});

fs.copySync(BuildDir.JEKYLL, BuildDir.STAGE);

reporter.step('Processing Jekyll files', () => {
  platformSites.forEach((site) => {
    site.files.forEach((f) => processJekyllFile(site, f));
  });
});

reporter.step('Copying supplementary directories', () => {
  platformSites.forEach((site) => {
    site.directoryPaths.forEach((d) => processDocsDirectory(site, d));
  });
});

const config = reporter.step('Preparing configuration', () => {
  const c = new JekyllConfiguration(path.join(BuildDir.STAGE, JEKYLL_CONFIG_PATH));
  platformSites.forEach((site) => c.addPlatformConfig(site.config));
  return c;
});

reporter.step('Building assets', () => {
  // TODO(shyndman): Periodically check if we can uncomment this. There's some
  // noisy deprecation deep in Webpack.
  process.noDeprecation = true;

  const webpackConfig = require('../webpack.config');
  if (cli.flags.watch) {
    addWatchToWebpackConfig(webpackConfig);
  }

  webpack(webpackConfig, (err, stats) => {
    if (err) {
      reporter.fatal(err);
      process.exit(1);
    }

    reporter.webpackStats(stats);
    buildJekyll();
  });
}, { noCheck: true });

function buildJekyll() {
  reporter.step('Building Jekyll site', () => {
    // Write out the merged config.
    config.write(path.join(BuildDir.STAGE, JEKYLL_CONFIG_PATH));

    const jekyllEnv = Object.assign({}, process.env, {
      BUNDLE_GEMFILE: path.join(projectRootPath, 'GEMFILE'),
    });
    execSync(`bundle exec jekyll build \
        --source ${BuildDir.STAGE} \
        --destination ${BuildDir.DIST} \
        --config ${path.join(BuildDir.STAGE, '_config.yml')}`,
      {
        env: jekyllEnv,
        stdio: ['ignore', 'ignore', 'inherit'],
      });
  });

  if (!cli.flags.watch) {
    reporter.complete(path.resolve(BuildDir.DIST));
  }
}

if (cli.flags.watch) {
  setupFileWatches((filePath) => {
    reporter.fileChanged(filePath);

    const newFilePath = filePath.replace(BuildDir.JEKYLL, BuildDir.STAGE);
    fs.ensureDirSync(path.dirname(newFilePath));
    fs.copySync(filePath, newFilePath);

    const fileExt = path.extname(filePath);
    if (!ASSET_EXTENSIONS.has(fileExt)) {
      buildJekyll();
    }
  });
}
